// --- Day 3: Toboggan Trajectory ---

// With the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.

// Due to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:

// ..##.......
// #...#...#..
// .#....#..#.
// ..#.#...#.#
// .#...##..#.
// ..#.##.....
// .#.#.#....#
// .#........#
// #.##...#...
// #...##....#
// .#..#...#.#

// These aren't the only trees, though; due to something you read about once involving arboreal genetics and biome stability, the same pattern repeats to the right many times:

// ..##.........##.........##.........##.........##.........##.......  --->
// #...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
// .#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
// ..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
// .#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
// ..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->
// .#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
// .#........#.#........#.#........#.#........#.#........#.#........#
// #.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
// #...##....##...##....##...##....##...##....##...##....##...##....#
// .#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

// You start on the open square (.) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).

// The toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by counting all the trees you would encounter for the slope right 3, down 1:

// From your starting position at the top-left, check the position that is right 3 and down 1. Then, check the position that is right 3 and down 1 from there, and so on until you go past the bottom of the map.

// The locations you'd check in the above example are marked here with O where there was an open square and X where there was a tree:

// ..##.......|..##.........##.........##.........##.........##.......  --->
// #..O#...#..|#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
// .#....X..#.|.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
// ..#.#...#O#|..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
// .#...##..#.|.X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
// ..#.##.....|..#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
// .#.#.#....#|.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
// .#........#|.#........X.#........#.#........#.#........#.#........#
// #.##...#...|#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
// #...##....#|#...##....##...#X....##...##....##...##....##...##....#
// .#..#...#.#|.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

// In this example, traversing the map using this slope would cause you to encounter 7 trees.

// Starting at the top-left corner of your map and following a slope of right 3 and down 1, how many trees would you encounter?

// Puzzle Input
const input = [
"...#.....#.......##......#.....",
"...#..................#........",
"....##....#.......#............",
".........#.......#.......#.....",
"..#..............#.........#..#",
".....#.........#....#....#....#",
"....##..........#.#.##.........",
"...#....##...#...#...#.#..#....",
"...#.......###..........#......",
".........#.....#....#...#.#....",
".#...###..#..##..#.........###.",
"#.#...#..........###...#....#..",
"#....#.#..#..........#.......#.",
".#..#........##.#..............",
"............#..#.#............#",
".............#..........#......",
"...#.......#...............#...",
".#...#..#..#............#..#...",
"....##.##..................#.##",
"#......#...#..##....#.....#...#",
"#..#..........##....#...###....",
"##......#.##.#......#..#......#",
"....#...#.......##.##...#.#..#.",
"##.#...#....#...#...#........#.",
"........#..#.....#....#.......#",
".#......#......#..............#",
".#.....#..#..#..#..#..#....#..#",
".......#.....#.................",
".#......#...#..#..#...#...#....",
".........#..#..#.........#.....",
".....#.........#.#..........#..",
"#......#....#....##....#.#.#...",
"................##.#...........",
".....##.....#............#.#...",
"...........#...#.#..##...#.....",
".......#....##.......#..#....#.",
".##......##....#....####.##..#.",
".....#.##.....#...#....##......",
".............#....#......#....#",
"#.#.#.###........#.#....#.#....",
".##...........#................",
"#..#..#...##..##.##...#..#.#...",
"..#......##..#.#......#..#.#.#.",
".....#..............#......#...",
"#.#..##.##...#............##...",
".#......#.............#........",
"........##....#......#..#......",
"##.........##....#..........#..",
"..#..#....#.........##....#..#.",
"........#..#..#........#...#...",
"#.........#......##.#...#.##...",
".##.............#..###....#.##.",
".##.#....#.......#.............",
"#..##.#.........#..##.#......##",
"....#..#.......................",
".#.#.........#...............#.",
"....#......#.#..##..#...#.#..#.",
"#....##...##..#.......##.....##",
"....##...##...#....#.....#..#..",
".#......#.#.#.#......##..#..#..",
".....##..#..#.....#.....#...##.",
"....###................#..#.#..",
".....#..#..#.#..........#..#...",
"...#.....#............#........",
"#.............#...#..#.....#..#",
"#........#.....#.#..#......#...",
"...#.##.....#.#..#.........#..#",
".......##...#..#.#....##.......",
"..................#..##..#.#.#.",
"..#......#..#..#.....#...#.#...",
".#.......#.....#.#....#.#......",
"##..#.#....#.###..#...#.......#",
".......................#.......",
"..###..........#..##.##.#...##.",
".....#...#....###.........#..#.",
"..#.....#....###...............",
"....#.......#........#....#..#.",
"......#................#.#...##",
"#.....#.......#..#..........##.",
"#.#....##.........#.....#.#....",
"#.#.#...#............####.##..#",
".....#....####........#...#..#.",
"....##........#.#..............",
".#......#..#..##......#....#.##",
"..#....#.#........#..#....#....",
".#...#.##...#.#.....#.....#...#",
"..........#................###.",
".....#..........##..#..........",
".....#..................#...#..",
"#......##....#.#...#..#.......#",
"..#......##....#......#.#...#..",
"###.#..###.#.#..#...#....#.....",
"#.....#.#...#.##...#........#..",
"#..........................#...",
".#.#.....#.#.#.......##.#.#....",
".#....#..##......#....#........",
".#.......#.##......#.#..#......",
"............#.....#....##.##...",
"....##........##......#........",
"....#......##....##.....#......",
"..#.#.....#......#...#.#.......",
".###.........#...#........#....",
"......#.#...##.....##..##..#...",
"...#...#.#......#..##..#.......",
".##....#.#........#.#..........",
"#....#.#......#......#.#.#.....",
"#.....#.....#................##",
"...........#....#...#...#......",
"..........##..##..#...##.......",
".##......#.......#..#.#..##....",
"..........##....#....#..#.#....",
"...............#......#.....##.",
".#...#....................#..#.",
".............###...............",
".####..............#...#.......",
"....#...#.#...#...#....#.......",
".......#.#.....................",
"...............................",
"#..#.........##.......#.#.#....",
"....##...#...........#......#..",
"........##...#......#..........",
"....#.#.....#..#......#........",
"#..#................#..#.##....",
".#........#.......#.........##.",
"#...........#...#...#......#.#.",
"..#.#.#..........##.##...#...#.",
"..#...#.##...#.#...........#...",
"##...........##...##...##......",
"....#....##...#......#..#.....#",
"#..#.#.#..#...#...#....#.......",
"............#.....#....#....#.#",
"....##.....#.........#......#..",
".....##.......#...#...#.###....",
"...##......##..###.#.#....#....",
"#.#.#.#..#.#.........#...#...##",
"..#..........#.................",
"....##....#....................",
"###.#...............##...##.#..",
"....#.......##.#..#.#..........",
"............##..#.......##.....",
"#...#.........#..#..#..#...#...",
"..#......##..#.#...##.#.......#",
"......#................#...#...",
"......#..###............#.#....",
"..#.#...###...#..#...#......##.",
"...#.##...##............#......",
"#...##........#.#..#.......#...",
"#..#.....#..#.##...............",
"..#.....#.#....#.........#.....",
".............#....#..#...#.##..",
"..#.#.....................##.#.",
"........#.......#..#.#.........",
"##..............#.....#.......#",
".#.##...###....#.....#..##.#...",
"#..#...#..#......#..........###",
"#...........#..#...#....#....#.",
"....#..#.......##......#......#",
"#...#.#...............##...#...",
"...##.#..##.......##..#........",
"...........##..........#.......",
"..#....#..##...#......#.#......",
".#.#....#.#.#...#.#............",
".#.#..#...##.......#.#.........",
"...#...#.............#.######..",
"##.#........###.......#....#.#.",
".#....#.....#.#........#......#",
"..#.#.........#..........##.#..",
".#....#.#..............#......#",
".....#..##.........#..##..#....",
"........#..#....#.......#.....#",
"#.#.......#.....#.##.#...#....#",
"...#...##...#....#.....#....#.#",
"#..##....#..........#..#.......",
".......#.#.....#...#.#.#.....##",
"#...#...#..#......##.#..#......",
"...#.......#....#...........#.#",
"##.......#####.#.........#..#..",
"....#.#...................##...",
"......#..##............#.......",
"#.........#....#####.#.#..#.#..",
"..#......#.#.##............#...",
"..#...#.....#.#....#......#....",
".#...#....#....#.#.#......#.#..",
"..#.##.....#..........#...#.#..",
".......#...#.............#...#.",
".#.........#.....#.#........##.",
"#....#..#..........##.......##.",
"...#....#.#.........#.......###",
"......#....#.#......#.......#..",
".....#...#...#.#...##..#.#.....",
"#.........##..#...##..#.#....#.",
"...#......#.#......##.....#....",
".#####.....#.#.#.#...###.##....",
"..#................#.#...#.#...",
"#.......##...#.........##..#...",
"..#.....#....##............#...",
"#............##...............#",
"..#..#.................#.......",
"...............#..#.......##...",
"..##..#....#...##..........#..#",
"#...###....##.#.......#.....#..",
"..........#.........#..#......#",
"##....#.....#...##.......#.....",
"..#..#.......#.................",
"..#..##......#.........#......#",
"...........##.#..#......#.#..#.",
"..#...##...##......#...#...#.#.",
".#..#.....#.........#..........",
"#..##...#............#..#.#....",
"..#...#...##.#........#....#.#.",
"......##..###.#....#........#..",
".....#..#....##...##..........#",
"................#.#.#.....#..#.",
"#.##...#......#.#..#.......###.",
".......#.#..#..#......#..##..#.",
".##...#...#....#....#.......#..",
"......#..#....#.#.###.....#.#.#",
"#....#.#...#......#.#.....#..#.",
".......#.#...#.#.#............#",
"#.....#..#...#.................",
".....#..........#..#.#..#.#....",
".........#......#.#.........###",
"..#.###........#....##.#.......",
".#.......#.#......#........#..#",
"............#........#.....#...",
"......#......#....#.#....#.....",
".#.......#.....#.##.#..#...#..#",
"##.....#...#..........##..#...#",
".#........#....#...#....##.#...",
"...#.#.......#.#....#.#...#...#",
"........#.#.....#.##...#.#.#...",
"...........#....#..#.........#.",
"......#.#..#..##...#.......#...",
"...#....#..#..#.##...........##",
".#..#.#.#......#....##...#.....",
"......#..#........#...##.......",
".............#...##.#.....#...#",
"....#...............##......#.#",
".#...........#.........###.##.#",
"....##........##...#.##.....#..",
"#......##........#...........#.",
"###.#.................#.....#..",
".....##..#.........#......##.#.",
"#.#.......##.#..#...#...#......",
"...#.#..##.....#....##.....#.#.",
"...##..#...#........#.#..#..#..",
"...........#....#...#...##.....",
"##.......#...#.#.##...##..#.#..",
"#....#.#..##...................",
".#...................#.#..#....",
"#.....#..........#..#...#...#..",
"...#..#............#.#.........",
"............#..##.....##......#",
"#....#.........#.#..#..........",
"...#.#................#....#.#.",
"..#..#...#...#.#.#...#.#.#.....",
"..#.......#.............##..#.#",
"#........#.#.###.#...#..#.###..",
".......#......#..#.....####...#",
"..##....#..#...................",
"....##.#....#......#.#..#..#..#",
"#...........##...#.#.##..###...",
"##.##......#...........#....#..",
".#....#....#..#..#...##...#....",
"...##.#.#......#...............",
".....##.##...#...........#.....",
"....#...#.#.........##.#....#.#",
"#..#...........#......#........",
"..#..#.....#....#.##.......#..#",
"..#.......##.....##.......#...#",
".#.##.#..#...............#....#",
".........#...........#.........",
"..........##......#.#..........",
"..#........###....#..#...#...#.",
"....#.#...#.....#..#....#......",
"..##...##...#..#..##......##..#",
"..#..#......#....#....#...#..##",
"...#...............#..#........",
"....##..#...#......#........#..",
"###.....##.......#.............",
".#.#.##........##..#...#.......",
".....###............#..#..#....",
".#....##.#...####........#.....",
"............#.#.....##....#.#..",
"....#..........#...#...........",
"........#.#...#..##...........#",
"#.......#..#.......###...#....#",
"#....#..#......#.....#...##.#..",
"..#.............#.#.###...##..#",
".#.#....#...#.....#...#.......#",
".##.#..#.........#..#......#...",
"#....#...#......#.....#.....#..",
"...........#....#.......##...#.",
"#.#..##....#....#.#.......#.#..",
"..............#.#..##.##.......",
"....#........#......#....#.#...",
"......#.....................#..",
"#..##...##.....#.........#.....",
"#.....#.....#....#...#.....#...",
"........###...........#...#....",
"............#.....#...##....#..",
".......#.......#...#.#...##....",
"..#.#..#....#...#...#....#.....",
"..........#.#....#....###....#.",
".##...#......###..#............",
"...#...#........#....#....##...",
"##.....#.##...#.#...........#.#",
"..........#.#....#...##.#...#..",
"..#....#.#...#...#....#.###....",
"......#.##..#..#.........#.###.",
"#.#.#.....#.....##.......#.....",
"...#..#..#....#.#....#....#....",
"##..#.#................#......#",
".....#...#..#......#..####.....",
".....##.....#....####......#...",
"..........##..###.#....#.....##",
"###...#.......#......##...#....",
".......##...#...#..#.##.#....##",
".....##.....##...##.....#..#..#",
"......#.#.....#...#....#...#...",
"..##........#...#..............",
"..#........#.##.........#...#..", //31 total //33 -> 2 // 32 => 1 // 31 => 0 
"#....#....#................#..."
];


// make every line of trees into a string
// put all the strings in to one array
// iterate through the array given the pattern in the instructions
// go right 3, go down 1
// keep track of where we are before we go down into another line
// start the new line at the same right position
// if it is a tree (#) we increment a counter
// when we get undefined because we left... the mountain we end the func
// we say how many trees we ran into
// const treeCount = (array, steps)=> {
//   let end = array[0].length; // 30 is the last index, 31 char total
//   let index = steps; // start equal to steps
//  return array.reduce((count, string, idx)=> {
//   // if(string[index]=== undefined) index= 
//   if(idx !== 0){
//     if(string[index] === '#') count++;
//     // if(index+steps === end + (steps-1)) index = steps - 1;
//     // else if(index+steps === end + (steps-2)) index = steps-2;
//     // else if(index+steps === end) index = 0;
//     if(index+steps >= end ) index = (index+steps)-end
//     else index += steps;
//     console.log(index);
//   }
//   return count
//  }, 0)
// }

// console.log(treeCount(input, 7));

const treeCountTwo = (array, steps, down)=> {
  let end = array[0].length; // 30 is the last index, 31 char total
  let index = steps; // start equal to steps
  let count = 0;

  for (let i = 0; i < array.length; i += down) {
    if(i !== 0){
      if(array[i][index] === '#') count++;
      if(index+steps >= end ) index = (index+steps)-end
      else index += steps;
      // console.log(index);
    }  
  }
  return count
}

console.log(treeCountTwo(input, 3, 1));


// --- Part Two ---

// Time to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.

// Determine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:

// Right 1, down 1. // 70
// Right 3, down 1. (This is the slope you already checked.) // 220
// Right 5, down 1. // 63
// Right 7, down 1. // 76
// Right 1, down 2. // 29

console.log(70 * 63 * 76 * 29 * 220)

// ..##.......|..##.........##.........##.........##.........##.......  --->
// #..O#...#..|#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
// .#....X..#.|.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
// ..#.#...#O#|..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
// .#...##..#.|.X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
// ..#.##.....|..#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
// .#.#.#....#|.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
// .#........#|.#........X.#........#.#........#.#........#.#........#
// #.##...#...|#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
// #...##....#|#...##....##...#X....##...##....##...##....##...##....#
// .#..#...#.#|.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

// In the above example, these slopes would find 2, 7, 3, 4, and 2 tree(s) respectively; multiplied together, these produce the answer 336.

// What do you get if you multiply together the number of trees encountered on each of the listed slopes?